import slick.jdbc.PostgresProfile.api._

class CommentTable(tag: Tag) extends Table[Comment](tag, "comments") {
  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  def postId = column[Long]("post_id")
  def content = column[String]("content")
  def author = column[String]("author")

  // Map columns to the Comment case class
  def * = (id.?, postId, content, author) <> ((Comment.apply _).tupled, Comment.unapply)
}

class CommentDAO(db: Database) {
  val comments = TableQuery[CommentTable]

  // Create a new comment
  def insert(comment: Comment): DBIO[Long] =
    (comments returning comments.map(_.id)) += comment

  // Find a comment by ID
  def findById(id: Long): DBIO[Option[Comment]] =
    comments.filter(_.id === id).result.headOption

  // Find all comments for a specific post
  def findByPostId(postId: Long): DBIO[Seq[Comment]] =
    comments.filter(_.postId === postId).result

  // Delete a comment by ID
  def delete(id: Long): DBIO[Int] =
    comments.filter(_.id === id).delete
}
